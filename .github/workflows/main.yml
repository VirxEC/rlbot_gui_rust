name: Build & Deploy Windows MSI

on:
  push:
    branches: [ "master" ]

  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  windows:
    runs-on: windows-2022
    permissions:
      contents: write
    steps:
      - name: Fetch GUI
        uses: actions/checkout@v3

      - name: Fetch Release Tags
        run: git fetch --all --tags

      # Fail the build if the version number wasn't incremented
      - name: Check Release Version
        uses: thebongy/version-check@v1
        with:
          file: src-tauri/Cargo.toml
          tagFormat: v${version}
          failBuild: false
        id: version_check_staging

      - name: Install Tauri CLI
        if: steps.version_check_staging.outputs.versionChanged
        run: yarn add -D @tauri-apps/cli

      - name: Fetch build cache
        if: steps.version_check_staging.outputs.versionChanged
        uses: actions/cache@v3.0.4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            src-tauri/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build GUI
        if: steps.version_check_staging.outputs.versionChanged
        env:
          TAURI_PRIVATE_KEY: '${{ secrets.TAURI_PRIVATE_KEY }}'
          TAURI_KEY_PASSWORD: '${{ secrets.TAURI_KEY_PASSWORD }}'
        run: yarn tauri build

      - name: Create Release
        if: steps.version_check_staging.outputs.versionChanged
        uses: ncipollo/release-action@v1
        with:
          name: RLBotGUI Rust port ${{ steps.version_check_staging.outputs.releaseVersion }}
          artifacts: "./**/target/**/*.msi,./**/target/**/*.msi.zip"
          body: ${{ github.event.head_commit.message }}
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.version_check_staging.outputs.releaseVersion }}

      - name: Create new latest.json
        if: steps.version_check_staging.outputs.versionChanged
        shell: cmd
        run: gen-latest-json.bat ${{ steps.version_check_staging.outputs.releaseVersion }} ${{ steps.version_check_staging.outputs.rawVersion }} "${{ github.event.head_commit.message }}"

      - name: Change branch to site
        if: steps.version_check_staging.outputs.versionChanged
        uses: actions/checkout@v3
        with:
          ref: site

      - name: Move in new latest.json
        if: steps.version_check_staging.outputs.versionChanged
        shell: cmd
        run: move ..\latest.json .\docs\

      - name: Commit new latest.json
        if: steps.version_check_staging.outputs.versionChanged
        shell: cmd
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
          git add docs\latest.json
          git commit -m "Updating latest.json to include ${{ steps.version_check_staging.outputs.releaseVersion }}"
          git push
