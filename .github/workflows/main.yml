name: Build & Deploy Files

on:
  push:
    branches: [ "master" ]

  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  windows:
    runs-on: windows-2022
    permissions:
      contents: write
    steps:
      - name: Fetch GUI
        uses: actions/checkout@v3

      - name: Fetch Release Tags
        run: git fetch --all --tags

      # Fail the build if the version number wasn't incremented
      - name: Check Release Version
        uses: thebongy/version-check@v1
        with:
          file: src-tauri/Cargo.toml
          tagFormat: v${version}
          failBuild: false
        id: version_check_staging

      - name: Install Tauri CLI
        if: ${{ steps.version_check_staging.outputs.versionChanged == 'true' }}
        run: yarn add -D @tauri-apps/cli

      - name: Fetch build cache
        if: ${{ steps.version_check_staging.outputs.versionChanged == 'true' }}
        uses: actions/cache@v3.0.4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            src-tauri/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build GUI
        if: ${{ steps.version_check_staging.outputs.versionChanged == 'true' }}
        env:
          TAURI_PRIVATE_KEY: '${{ secrets.TAURI_PRIVATE_KEY }}'
          TAURI_KEY_PASSWORD: '${{ secrets.TAURI_KEY_PASSWORD }}'
        run: yarn tauri build

      - name: Create Release
        if: ${{ steps.version_check_staging.outputs.versionChanged == 'true' }}
        uses: ncipollo/release-action@v1
        with:
          name: RLBotGUI Rust port ${{ steps.version_check_staging.outputs.releaseVersion }}
          artifacts: "./**/target/**/*.msi,./**/target/**/*.msi.zip"
          body: ${{ github.event.head_commit.message }}
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.version_check_staging.outputs.releaseVersion }}

      - name: Create new latest.json
        if: ${{ steps.version_check_staging.outputs.versionChanged == 'true' }}
        shell: cmd
        run: gen-latest-json.bat ${{ steps.version_check_staging.outputs.releaseVersion }} ${{ steps.version_check_staging.outputs.rawVersion }} "${{ github.event.head_commit.message }}"

      - name: Change branch to site
        if: ${{ steps.version_check_staging.outputs.versionChanged == 'true' }}
        uses: actions/checkout@v3
        with:
          ref: site

      - name: Move in new latest.json
        if: ${{ steps.version_check_staging.outputs.versionChanged == 'true' }}
        shell: cmd
        run: move ..\latest.json .\docs\

      - name: Commit new latest.json
        if: ${{ steps.version_check_staging.outputs.versionChanged == 'true' }}
        shell: cmd
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add docs\latest.json
          git commit -m "Updating latest.json to include ${{ steps.version_check_staging.outputs.releaseVersion }}"
          git push

  linux:
    runs-on: ubuntu-18.04
    permissions:
      contents: write
    steps:
      - name: Fetch GUI
        uses: actions/checkout@v3

      - name: Fetch APT repo
        uses: actions/checkout@v3
        with:
          repository: VirxEC/rlbot_gui_rust_apt
          path: ../rlbot_gui_rust_apt

      - name: Fetch Release Tags
        working-directory: ../rlbot_gui_rust_apt
        run: git fetch --all --tags

      # Fail the build if the version number wasn't incremented
      - name: Check Release Version
        uses: thebongy/version-check@v1
        with:
          file: src-tauri/Cargo.toml
          tagFormat: v${version}
          failBuild: false
        id: version_check_staging
        
      - name: Read Package
        id: package
        uses: juliangruber/read-file-action@v1
        with:
          path: ./rlbot_gui_rust_apt/apt-repo/dists/stable/main/binary-amd64/Packages

      - name: Install ubuntu dev packages
        if: ${{ contains(steps.package.outputs.content, steps.version_check_staging.outputs.rawVersion) }}
        run: |
          sudo apt update
          sudo apt install libwebkit2gtk-4.0-dev libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Install Tauri CLI
        if: ${{ contains(steps.package.outputs.content, steps.version_check_staging.outputs.rawVersion) }}
        run: yarn add -D @tauri-apps/cli

      - name: Fetch build cache
        if: ${{ contains(steps.package.outputs.content, steps.version_check_staging.outputs.rawVersion) }}
        uses: actions/cache@v3.0.4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            src-tauri/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build GUI
        if: ${{ contains(steps.package.outputs.content, steps.version_check_staging.outputs.rawVersion) }}
        run: yarn tauri build

      - name: Move out build files
        if: ${{ contains(steps.package.outputs.content, steps.version_check_staging.outputs.rawVersion) }}
        run: mv src-tauri/target/release/bundle/deb/ ../

      - name: Create .tar.gz
        if: ${{ contains(steps.package.outputs.content, steps.version_check_staging.outputs.rawVersion) }}
        run: tar -czf ../deb/linux-basics.tar.gz ../deb/*/data/usr/bin/rl-bot-gui ../deb/*/data/usr/share/applications/rl-bot-gui.desktop

      # - name: Create Release
      #  if: ${{ contains(steps.package.outputs.content, steps.version_check_staging.outputs.rawVersion) }}
      #   uses: ncipollo/release-action@v1
      #   with:
      #     name: RLBotGUI Rust port ${{ steps.version_check_staging.outputs.releaseVersion }}
      #     artifacts: "../deb/linux-basics.tar.gz,../deb/*.deb"
      #     body: ${{ github.event.head_commit.message }}
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     tag: ${{ steps.version_check_staging.outputs.releaseVersion }}

      - name: Move in update files
        if: ${{ contains(steps.package.outputs.content, steps.version_check_staging.outputs.rawVersion) }}
        working-directory: ../rlbot_gui_rust_apt
        run:
          mv ../deb/linux-basics.tar.gz apt-repo/pool/main/
          cd apt-repo
          dpkg-scanpackages --arch amd64 pool/ > dists/stable/main/binary-amd64/Packages
          cat dists/stable/main/binary-amd64/Packages | gzip -9 > dists/stable/main/binary-amd64/Packages.gz

      - name: Sign update files
        if: ${{ contains(steps.package.outputs.content, steps.version_check_staging.outputs.rawVersion) }}
        working-directory: ../rlbot_gui_rust_apt
        env: 
          APT_KEY: ${{ secrets.APT_KEY }}
          KEY_NAME: ${{ secrets.KEY_NAME }}
        run:
          echo "${{ secrets.APT_KEY }}" > pgp-key.private
          ls
          chmod +x generate-deb-release-info.sh
          ./generate-deb-release-info.sh > apt-repo/dists/stable/Release
          export GNUPGHOME="$(mktemp -d pgpkeys-XXXXXX)"
          gpg --list-keys
          cat pgp-key.private | gpg --import
          cat apt-repo/dists/stable/Release | gpg --default-key ${{ secrets.KEY_NAME }} -abs > ./apt-repo/dists/stable/Release.gpg
          cat apt-repo/dists/stable/Release | gpg --default-key ${{ secrets.KEY_NAME }} -abs --clearsign > ./apt-repo/dists/stable/InRelease
          git diff --compact-summary
